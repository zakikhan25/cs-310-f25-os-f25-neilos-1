UNAME_M := $(shell uname -m)
ifeq ($(UNAME_M),aarch64)
PREFIX:=i686-linux-gnu-
BOOTIMG:=/usr/lib/grub/i386-pc/boot.img
GRUBLOC:=
else
PREFIX:=
BOOTIMG:=/usr/lib/grub/i386-pc/boot.img
GRUBLOC :=
endif

CC := $(PREFIX)gcc
LD := $(PREFIX)ld
OBJDUMP := $(PREFIX)objdump
OBJCOPY := $(PREFIX)objcopy
SIZE := $(PREFIX)size

CONFIGS := -DCONFIG_HEAP_SIZE=4096
CFLAGS := -ffreestanding -mgeneral-regs-only -mno-mmx -m32 -march=i386 -fno-pie -fno-stack-protector -g3 -Wall

ODIR = obj
SDIR = src

OBJS = \
        multiboot_header.o\
        kernel_main.o \
        rprintf.o \
# Make sure to keep a blank line here after OBJS list

OBJ = $(patsubst %,$(ODIR)/%,$(OBJS))

$(ODIR)/%.o: $(SDIR)/%.c
	$(CC) $(CFLAGS) -c -g -o $@ $^

$(ODIR)/%.o: $(SDIR)/%.s
	$(CC) $(CFLAGS) -c -g -o $@ $^

all: bin rootfs.img

bin: obj $(OBJ)
	$(LD) -melf_i386  obj/* -Tkernel.ld -o kernel
	$(SIZE) kernel

obj:
	mkdir -p obj

rootfs.img: kernel grub.cfg
	@echo "Creating disk image..."
	dd if=/dev/zero of=rootfs.img bs=1M count=32
	
	@echo "Creating GRUB image..."
	$(GRUBLOC)grub-mkimage -p "(hd0,msdos1)/boot/grub" -o grub.img -O i386-pc \
		normal biosdisk multiboot multiboot2 configfile fat exfat part_msdos
	
	@echo "Writing bootloader..."
	dd if=$(BOOTIMG) of=rootfs.img conv=notrunc bs=446 count=1
	dd if=grub.img of=rootfs.img conv=notrunc bs=512 seek=1
	
	@echo "Creating partition..."
	echo 'start=2048, type=83, bootable' | sfdisk rootfs.img
	
	@echo "Creating filesystem..."
	mkfs.vfat --offset 2048 -F16 rootfs.img
	
	@echo "Copying kernel..."
	mcopy -i rootfs.img@@1M kernel ::/
	
	@echo "Creating boot directory structure..."
	mmd -i rootfs.img@@1M ::/boot
	mmd -i rootfs.img@@1M ::/boot/grub
	
	@echo "Copying GRUB config..."
	mcopy -i rootfs.img@@1M grub.cfg ::/boot/grub/grub.cfg
	
	@echo " -- BUILD COMPLETED SUCCESSFULLY --"

run:
	qemu-system-i386 -hda rootfs.img

debug:
	./launch_qemu.sh

clean:
	rm -f grub.img kernel rootfs.img obj/*
